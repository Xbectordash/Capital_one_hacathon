# FarmMate Agricultural AI - Project Configuration
# Central configuration file for the entire three-tier architecture

[project]
name = "FarmMate"
version = "1.0.0"
description = "AI-Powered Agricultural Assistant with Three-Tier Architecture"
license = "MIT"
authors = ["FarmMate Team <team@farmmate.ai>"]
homepage = "https://github.com/Xbectordash/Capital_one_hacathon"
repository = "https://github.com/Xbectordash/Capital_one_hacathon.git"
documentation = "https://github.com/Xbectordash/Capital_one_hacathon/tree/agent-python/docs"

[project.keywords]
values = ["agriculture", "ai", "farming", "crop-recommendation", "weather", "soil-analysis", "react", "express", "python", "docker"]

# Architecture Overview
[architecture]
type = "three-tier"
pattern = "microservices"
communication = "websocket + rest"

[architecture.tiers]
frontend = { name = "React Web App", port = 3000, technology = "React + Socket.IO" }
gateway = { name = "Express Gateway", port = 5000, technology = "Node.js + Express + Socket.IO" }
ai_backend = { name = "Python AI Server", port = 8000, technology = "Python + FastAPI + LangChain" }
database = { name = "ChromaDB", port = 8001, technology = "Vector Database" }

# Service Configuration
[services]

[services.frontend]
name = "farmmate-react-frontend"
path = "./frontend/web/agricultural-chat-app"
dockerfile = "./frontend/dockerfile"
port = 3000
healthcheck = "http://localhost:3000"
environment = ["REACT_APP_BACKEND_URL=http://localhost:5000", "REACT_APP_SOCKET_URL=http://localhost:5000"]

[services.backend]
name = "farmmate-express-gateway" 
path = "./backend"
dockerfile = "./backend/Dockerfile"
port = 5000
healthcheck = "http://localhost:5000/health"
environment = ["NODE_ENV=production", "PORT=5000", "PYTHON_SERVER_URL=ws://agent-python:8000"]

[services.ai_server]
name = "farmmate-ai-server"
path = "./agent-python"
dockerfile = "./agent-python/Dockerfile" 
port = 8000
healthcheck = "http://localhost:8000/health"
environment = ["PYTHONDONTWRITEBYTECODE=1", "PYTHONUNBUFFERED=1", "PORT=8000"]

[services.database]
name = "farmmate-chromadb"
path = "./chromaDB"
dockerfile = "./chromaDB/Dockerfile"
port = 8001
healthcheck = "http://localhost:8001/api/v1/heartbeat"
volumes = ["chromadb_data:/chroma/chroma"]

# Development Configuration
[development]
hot_reload = true
debug_mode = true
log_level = "debug"

[development.commands]
start_all = "make dev"
build_all = "make build"
test_all = "make test"
clean_all = "make clean"

# Production Configuration  
[production]
cluster_mode = true
auto_scaling = true
monitoring = true
ssl_enabled = true

[production.domains]
frontend = "app.farmmate.ai"
api = "api.farmmate.ai"
docs = "docs.farmmate.ai"

# Environment Variables
[environment]

[environment.required]
GEMINI_API_KEY = { description = "Google Gemini API key for LLM", type = "secret" }
OPENWEATHER_API_KEY = { description = "OpenWeather API key for weather data", type = "secret" }

[environment.optional]
NODE_ENV = { default = "development", description = "Node.js environment" }
PYTHONDONTWRITEBYTECODE = { default = "1", description = "Prevent Python bytecode generation" }
PYTHONUNBUFFERED = { default = "1", description = "Force Python stdout/stderr to be unbuffered" }

# Docker Configuration
[docker]
compose_file = "docker-compose.yml"
network = "farmmate-network"
registry = "farmmate"

[docker.images]
frontend = "farmmate/frontend:latest"
backend = "farmmate/backend:latest" 
ai_server = "farmmate/ai-server:latest"
database = "farmmate/chromadb:latest"

# Testing Configuration
[testing]
framework = "jest + pytest"
coverage_threshold = 80
integration_tests = true

[testing.commands]
unit = "make test"
integration = "make test-integration" 
coverage = "make test-coverage"
all = "make test-all"

# Deployment Configuration
[deployment]
platform = "docker-compose"
strategy = "rolling"
health_checks = true

[deployment.staging]
domain = "staging.farmmate.ai"
replicas = 1
resources = { cpu = "0.5", memory = "512Mi" }

[deployment.production]
domain = "farmmate.ai"
replicas = 3
resources = { cpu = "2", memory = "2Gi" }
auto_scaling = { min = 2, max = 10, cpu_threshold = 70 }

# Monitoring Configuration
[monitoring]
enabled = true
metrics = ["response_time", "error_rate", "cpu_usage", "memory_usage"]
alerts = true

[monitoring.tools]
logs = "docker-compose logs"
metrics = "prometheus"
alerts = "slack webhook"

# Security Configuration
[security]
cors_enabled = true
rate_limiting = true
input_validation = true
api_key_auth = false

[security.cors]
allowed_origins = ["http://localhost:3000", "https://farmmate.ai"]
allowed_methods = ["GET", "POST", "PUT", "DELETE"]
allowed_headers = ["Content-Type", "Authorization"]

# Database Configuration
[database]
type = "vector"
name = "chromadb"
collections = ["crop_knowledge", "weather_patterns", "soil_data", "government_schemes", "market_prices"]

# API Configuration
[api]
version = "v1"
base_url = "/api/v1"
rate_limit = "100 requests/minute"
documentation = "/docs"

[api.endpoints]
health = "/health"
websocket = "/ws/{user_id}"
query = "/query"
status = "/status"
