# Enhanced Multi-stage Dockerfile for React Frontend with Monitoring
FROM node:18-alpine as base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache curl

# Development stage
FROM base as development
COPY web/agricultural-chat-app/package*.json ./
RUN npm install
COPY web/agricultural-chat-app/ ./
EXPOSE 3000
CMD ["npm", "start"]

# Build stage
FROM base as build
COPY web/agricultural-chat-app/package*.json ./
RUN npm ci --only=production --silent
COPY web/agricultural-chat-app/ ./

# Copy enhanced components
COPY web/agricultural-chat-app/src/EnhancedApp.js ./src/App.js
COPY web/agricultural-chat-app/src/EnhancedApp.css ./src/App.css

# Build the application
RUN npm run build

# Production stage for web application
FROM nginx:alpine as web-production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=build /app/build /usr/share/nginx/html

# Copy enhanced nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 3000;
    server_name localhost;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # React Router support
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files \$uri \$uri/ /index.html;
        
        # Prevent caching of index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Proxy API calls to backend (for production)
    location /api/ {
        proxy_pass http://backend:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    # Proxy Socket.IO connections
    location /socket.io/ {
        proxy_pass http://backend:5000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Create startup script
RUN echo '#!/bin/sh\n\
set -e\n\
echo "⚛️  Starting FarmMate React Frontend with Monitoring..."\n\
echo "📍 Working directory: $(pwd)"\n\
echo "🌐 Nginx version: $(nginx -v 2>&1)"\n\
echo "📁 Checking build files..."\n\
ls -la /usr/share/nginx/html/ | head -10\n\
echo "🔍 Testing nginx configuration..."\n\
nginx -t\n\
echo "🌐 Starting nginx on port 3000"\n\
exec nginx -g "daemon off;"' > /start.sh && chmod +x /start.sh

# Run nginx
CMD ["/start.sh"]
