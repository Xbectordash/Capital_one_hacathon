# Docker Compose TOML Configuration
# Alternative to docker-compose.yml for better readability

[version]
value = "3.8"

[networks.farmmate-network]
driver = "bridge"

[volumes.chromadb_data]
driver = "local"

# Python AI Server Service
[services.agent-python]
build.context = "./agent-python"
build.dockerfile = "Dockerfile"
container_name = "farmmate-ai-server"
ports = ["8000:8000"]
environment = [
    "PYTHONDONTWRITEBYTECODE=1",
    "PYTHONUNBUFFERED=1",
    "PORT=8000"
]
networks = ["farmmate-network"]
healthcheck.test = ["CMD", "curl", "-f", "http://localhost:8000/health"]
healthcheck.interval = "30s"
healthcheck.timeout = "10s"
healthcheck.retries = 3
depends_on = ["chromadb"]

# Express.js Backend Gateway
[services.backend]
build.context = "./backend"
build.dockerfile = "Dockerfile"
container_name = "farmmate-express-gateway"
ports = ["5000:5000"]
environment = [
    "NODE_ENV=production",
    "PORT=5000",
    "PYTHON_SERVER_URL=ws://agent-python:8000"
]
networks = ["farmmate-network"]
healthcheck.test = ["CMD", "curl", "-f", "http://localhost:5000/health"]
healthcheck.interval = "30s"
healthcheck.timeout = "10s"
healthcheck.retries = 3
depends_on = ["agent-python"]

# React Frontend
[services.frontend-web]
build.context = "./frontend"
build.dockerfile = "dockerfile"
container_name = "farmmate-react-frontend"
ports = ["3000:80"]
environment = [
    "REACT_APP_BACKEND_URL=http://localhost:5000",
    "REACT_APP_SOCKET_URL=http://localhost:5000"
]
networks = ["farmmate-network"]
depends_on = ["backend"]

# ChromaDB Vector Database
[services.chromadb]
build.context = "./chromaDB"
build.dockerfile = "Dockerfile"
container_name = "farmmate-chromadb"
volumes = ["chromadb_data:/chroma/chroma"]
networks = ["farmmate-network"]
healthcheck.test = ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/heartbeat')"]
healthcheck.interval = "30s"
healthcheck.timeout = "10s"
healthcheck.retries = 3
